//cst
//?using System.Threading.Tasks;
//?using Microsoft.Win32;
internal class RegTemplate : CheckTemplate
{
private readonly RegistryKey RegKey;
private readonly SafeString RegVal;
internal override async Task<uint> GetCheckValue()
{
try
{
var value = await Task.FromResult<uint>(PrepareState(RegKey.GetValue(RegVal)));
return value;
}
catch
{
return 0u;
}
}
internal RegTemplate(params string[] args)
{
if (args.Length < 3)
{
Enabled = false;
return;
}
RegistryKey key = null;
RegVal = args[2];
switch (args[0].ToUpper())
{
case "HKEY_CLASSES_ROOT":
case "CLASSES_ROOT":
case "CLASSESROOT":
case "CLASSES":
key = Registry.ClassesRoot;
break;
case "HKEY_CURRENT_CONFIG":
case "CURRENT_CONFIG":
case "CURRENTCONFIG":
case "CONFIG":
key = Registry.CurrentConfig;
break;
case "HKEY_CURRENT_USER":
case "CURRENT_USER":
case "CURRENTUSER":
case "USER":
key = Registry.CurrentUser;
break;
case "HKEY_PERFORMANCE_DATA":
case "PERFORMANCE_DATA":
case "PERFORMANCEDATA":
case "PERFORMANCE":
key = Registry.PerformanceData;
break;
case "HKEY_USERS":
case "USERS":
key = Registry.Users;
break;
default:
key = Registry.LocalMachine;
break;
}
try
{
RegKey = key.OpenSubKey(args[1]);
}
catch
{
Enabled = false;
}
}
}
