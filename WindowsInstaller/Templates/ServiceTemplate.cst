//cst
//?using System;
//?using System.Threading.Tasks;
//?using System.ServiceProcess;
class ServiceTemplate : CheckTemplate
{
private readonly ServiceController sc;
private enum ServiceCheckType
{
Status,
Startup,
}
private readonly ServiceCheckType CheckType;
internal override async Task<uint> GetCheckValue()
{
try
{
uint value = 0;
switch (CheckType)
{
case ServiceCheckType.Status:
value = await Task.FromResult<uint>(PrepareState(sc.Status.ToString()));
return value;
case ServiceCheckType.Startup:
value = await Task.FromResult<uint>(PrepareState(sc.StartType.ToString()));
return value;
}
return 0u;
}
catch
{
//TODO: Handle Non-exsistant service
Enabled = false;
return 0u;
}
}
/// <summary>
///
/// </summary>
/// <param name="args">args[0] Service Name, args[1] CheckType</param>
internal ServiceTemplate(params string[] args)
{
if (args.Length < 2)
{
Enabled = false;
return;
}
sc = new ServiceController(args[0]);
try
{
Enum.TryParse(args[1], true, out ServiceCheckType checkType);
CheckType = checkType;
}
catch
{
Enabled = false;
}
}
}
